# Правила разработки StreamApp

## Общие правила
- Использовать Java 17 или выше
- Следовать принципам SOLID
- Использовать паттерн MVVM для архитектуры приложения
- Придерживаться стиля кодирования Google Java Style Guide
- Комментировать публичные методы и классы на русском языке

## Структура проекта
- Использовать Maven для управления зависимостями
- Организовать код в следующие пакеты:
  - `com.streamapp.core` - основная логика
  - `com.streamapp.network` - сетевое взаимодействие
  - `com.streamapp.ui` - пользовательский интерфейс
  - `com.streamapp.streaming` - функционал трансляции
  - `com.streamapp.util` - вспомогательные классы

## Сетевое взаимодействие
- Использовать JmDNS для обнаружения устройств
- Реализовать протокол обмена сообщениями на основе JSON
- Использовать WebSocket для передачи видеопотока
- Обрабатывать все сетевые исключения
- Логировать все сетевые события

## Трансляция экрана
- Использовать Java AWT Robot для захвата экрана
- Поддерживать разрешение 1080p
- Использовать H.264 для кодирования видео
- Реализовать буферизацию для плавной трансляции
- Обрабатывать разрывы соединения

## Пользовательский интерфейс
- Использовать JavaFX для создания UI
- Следовать Material Design
- Использовать FXML для описания интерфейса
- Добавить анимации для улучшения UX

## Тестирование
- Покрыть код unit-тестами (минимум 80%)
- Использовать JUnit 5 для тестирования
- Написать интеграционные тесты
- Тестировать на Linux и macOS
- Проверять производительность

## Документация
- Документировать API с помощью JavaDoc
- Создать README.md на русском языке
- Описать процесс установки
- Добавить примеры использования
- Документировать все конфигурационные параметры

## Безопасность
- Не хранить чувствительные данные в открытом виде
- Проверять все входящие данные
- Использовать безопасные сетевые протоколы
- Логировать попытки несанкционированного доступа
- Реализовать механизм аутентификации

## Производительность
- Оптимизировать использование памяти
- Минимизировать задержку при трансляции
- Использовать многопоточность где это необходимо
- Оптимизировать сетевой трафик
- Реализовать кэширование где это возможно 